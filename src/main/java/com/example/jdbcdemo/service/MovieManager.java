package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Movie;

public class MovieManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableMovie = "CREATE TABLE Movie(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), year integer, genre varchar(20), time int)";
	
	private PreparedStatement getMovieStmt;
	private PreparedStatement addMovieStmt;
	private PreparedStatement updateMovieStmt;
	private PreparedStatement deleteMovieStmt;
	private PreparedStatement deleteAllMoviesStmt;
	private PreparedStatement getAllMoviesStmt;

	private Statement statement;
	
	public MovieManager() {
		try {
			connection = DriverManager.getConnection(url);
			
			connection.setAutoCommit(false);
			
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Movie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableMovie);
			
			getMovieStmt = connection
					.prepareStatement("SELECT * FROM Movie WHERE id = ?");
			addMovieStmt = connection
					.prepareStatement("INSERT INTO Movie (name, year, genre, time) VALUES (?, ?, ?, ?)");
			deleteMovieStmt = connection
					.prepareStatement("DELETE FROM Movie WHERE id = ?");
			updateMovieStmt = connection
					.prepareStatement("UPDATE Movie SET name = ?, year = ?, genre = ?, time = ? WHERE id = ?");
			deleteAllMoviesStmt = connection
					.prepareStatement("DELETE FROM Movie");
			getAllMoviesStmt = connection
					.prepareStatement("SELECT * FROM Movie");

		} catch (SQLException e) {
			e.printStackTrace();			
		}
	}

	Connection getConnection() {
		return connection;
	}

	void deleteAllMovies() throws SQLException {
		try {
			deleteAllMoviesStmt.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			connection.rollback();
		}
	}
	
	public int updateMovie(Movie movie, long id) throws SQLException {
		int count = 0;
		try {
			updateMovieStmt.setString(1, movie.getName());
			updateMovieStmt.setInt(2, movie.getYear());
			updateMovieStmt.setString(3, movie.getGenre());
			updateMovieStmt.setInt(4, movie.getTime());
			updateMovieStmt.setLong(5, id);
			

			count = updateMovieStmt.executeUpdate();
			connection.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			connection.rollback();
		}
		return count;
	}

	public int addMovie(Movie movie) throws SQLException {
		int count = 0;
		try {
			addMovieStmt.setString(1, movie.getName());
			addMovieStmt.setInt(2, movie.getYear());
			addMovieStmt.setString(3, movie.getGenre());
			addMovieStmt.setInt(4, movie.getTime());
			

		count = addMovieStmt.executeUpdate();
		connection.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			connection.rollback();
		}
		return count;
	}
	
	public int deleteMovie(Movie movie) throws SQLException {
		int count = 0;
		try {
			deleteMovieStmt.setLong(1, movie.getId());
		
		count = deleteMovieStmt.executeUpdate();
		connection.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			connection.rollback();
		}
		return count;
	}
	
	public Movie getMovie(long id) throws SQLException {
		Movie movie = new Movie();

		try {			
			getMovieStmt.setLong(1, id);
			ResultSet rs = getMovieStmt.executeQuery();
									
			boolean found = rs.next();
						
			if( !found ) {
				return null;
			} else {			
				movie.setId(rs.getInt("id"));
				movie.setName(rs.getString("name"));
				movie.setYear(rs.getInt("year"));
				movie.setGenre(rs.getString("genre"));
				movie.setTime(rs.getInt("time"));
			}
			connection.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			connection.rollback();
		}
		return movie;		
	}

	public List<Movie> getAllMovies() throws SQLException {
		List<Movie> movies = new ArrayList<Movie>();

		try {
			ResultSet rs = getAllMoviesStmt.executeQuery();

			while (rs.next()) {
				Movie p = new Movie();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setYear(rs.getInt("year"));
				p.setGenre(rs.getString("genre"));
				p.setTime(rs.getInt("time"));
				movies.add(p);
			}
			connection.commit();
		} catch (SQLException e) {
			e.printStackTrace();
			connection.rollback();
		}
		return movies;
	}
	
}
